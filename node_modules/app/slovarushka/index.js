var
	url = require('url'),
	appsrv = require('core/appsrv.js'),
	appsrv = new appsrv(__filename),
	rpc = require('core/rpc.js'),
	view = require('./view.js'),
	Sync = require('sync');

Array.prototype.find = function(key, value) {
	var ret = {},
		self = this;
	this.forEach(function(param){
		if ( param[key] == value )
			ret = param;
	});
	return ret;
};

Array.prototype.pFind = function(page) {
	return this.find('page', page).vars;
}

render = function(req, res, next) {
	var err404 = false;
	var out = function(err, data){
		if(err404)
			res.statusCode = 404;
		res.setHeader("Content-Type", "text/html; charset=UTF-8");
		if(err||(data===undefined)){
			res.write('Internal error ' + err.toString());
		} else { 
			res.write(data);
		}
		res.end();
	};
	Sync(function(){
		var parsedUrl = url.parse(req.url, true),
			sess = req.session,
			pageStructure = view.main.sync(view, sess);
		if(sess.lastPage != undefined){
			var lPage = sess.lastPage.substring(1);
			if((lPage == '') || (lPage == 'logout'))
				lPage = 'index';
			pageStructure.pFind('content').lastPage = '#' + lPage;
		}
		if(parsedUrl.pathname == '/logout')
			parsedUrl.pathname = '/';
		sess.lastPage = parsedUrl.pathname;
		pageStructure.pFind('topnav').page = pageStructure.pFind('content').page = parsedUrl.pathname;
		pageStructure.pFind('content').year = new Date().getFullYear().toString();
		switch(parsedUrl.pathname){
		case '/':; case '/index':
			pageStructure.pFind('topnav').menu.find('id', 'index').active = true; 
			pageStructure.pFind('content').words = view.words.sync(view, sess).vars.words;
			break;
		case '/about': 
			var nTime = rpc.local.sync(rpc, 'platform.common.heartbeat', ['']);
			pageStructure.pFind('topnav').menu.find('id', 'about').active = true;
			pageStructure.pFind('content').content = appsrv.page.sync(appsrv, 'about', {time : nTime});
			//pageStructure.pFind('meta').content = pageStructure.pFind('content').content;
			break;
		case '/blog':
			var blogparam = { blog : view.blog.sync(view, sess) };
			pageStructure.pFind('content').lastPage = '';
			pageStructure.pFind('topnav').menu.find('id', 'blog').active = true;
			pageStructure.pFind('content').content = appsrv.page.sync(appsrv, 'blog', blogparam);
		default:
			try{
				if(req.params.wordid != undefined) {
					var word = view.words.sync(view, sess).vars.words.find('idnum', req.params.wordid);
					if(word.idnum == undefined)
						throw new Error('404');
					pageStructure.pFind('content').title = word.title;
					pageStructure.pFind('content').content = appsrv.page.sync(appsrv, 'word', { word : word });
					//pageStructure.pFind('meta').content = pageStructure.pFind('content').content;
				} else if (req.params.blogid != undefined) {
					var blog = view.blog.sync(view, sess).find('idnum', req.params.blogid);
					if(blog.idnum == undefined)
						throw new Error('404');
					pageStructure.pFind('content').title = blog.title;
					pageStructure.pFind('content').content = appsrv.page.sync(appsrv, 'blogpost', blog);
				}
			}catch(e){
				err404 = true;
				pageStructure.pFind('content').title = '404';
				pageStructure.pFind('content').content = appsrv.page.sync(appsrv, 'err404', {});
			}
		};
		pageStructure.pFind('topnav').loginname = (sess.loginname != undefined) ? sess.loginname : '';
		if(parsedUrl.query.ajax != undefined) {
			var x = appsrv.page.sync(appsrv, 'content', pageStructure.pFind('content'));
		} else {
			var pages = appsrv.renderAll.sync(appsrv, pageStructure);
			var x = appsrv.page.sync(appsrv, 'index', pages);
		}
		return x;
	}, out);
};

login = function(req, res, next) {
	var resJSON = {
			state : 'fail'
	};
	var out = function(err, data) {
		res.setHeader("Content-Type", "application/json; charset=UTF-8");
		res.write(JSON.stringify(resJSON));
		res.end();		
	};
	Sync(function(){
		var apikey = req.session.apikey,
			login = req.body.login,
			pwd = req.body.pwd;
		if(apikey == undefined)
			apikey = '';
		r = new RegExp(/\w+/);
		if(r.test.apply(r, [login, pwd])) {
			var n = rpc.local.sync(rpc, 'platform.common.getsession', [apikey, login, pwd]);
			var loginS = rpc.local.sync(rpc, 'platform.admin.getinfo', [n]);
			login = loginS.user[0].name + ' ' + loginS.user[0].surname;
			resJSON = {
					state: 'success',
					loginname : login
			}
			req.session.loginname = login;
			req.session.apikey = n;
		}
	}, out);
};

logout = function(req, res, next) {
	out = function(err, obj) {
		return render(req, res, next);
	};
	Sync(function(){
		var apikey = req.session.apikey;
		if(apikey != undefined){
			try{
				var x = rpc.local.sync(rpc, 'platform.common.deletesession', [apikey]);
				req.session.apikey = '';
				req.session.loginname = '';
			}catch(e){}
		}
	}, out);
}

app = function(app) {
	app.get('/', render);
	app.get('/index', render);	
	app.get('/about', render);
	app.get('/blog', render);
	app.get('/blog/:blogid', render);
	app.get('/word/:wordid', render);
	app.post('/login', login);
	app.get('/logout', logout);
};

module.exports = exports = app;
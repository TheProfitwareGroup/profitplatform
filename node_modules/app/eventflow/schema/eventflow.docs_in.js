var
    Sync = require('sync'),
    sprintf = require('sprintf').sprintf,
    rpc = require('core/rpc');

var schema = function (params) {
    var
        appsrv = params.appsrv,
        pageStructure = params.pageStructure,
        parsedUrl = params.parsedUrl,
        sess = params.sess;
    if (sess.ref != undefined)
        pageStructure.pFind('eventflow.docs_in').ref = sess.ref;
    var docData = rpc.local.sync(rpc, 'app.eventflow.web.document.find', [sess.apikey, sess.ref ? { ref: sess.ref } : {}]);
    if (sess.ref != undefined) {
        var docType = rpc.local.sync(rpc, 'app.eventflow.web.doctype.find', [sess.apikey, { sysid: docData[0].sysid}]);
        pageStructure.pFind('eventflow.docs_in').docType = docType.find('name', docData[0].doctype);
    }

    pageStructure.pFind('eventflow.docs_in').docsScroller =
        appsrv.page.sync(appsrv, 'scroller', { table: {
            rowspan: 2,
            head: [
                {
                    name: function (row) {
                        return sprintf('<a href="#eventflow.docs_in/%s">%s</a>', row.ref, row.ref)
                    },
                    title: 'Референс'
                },
                {
                    name: 'status',
                    title: 'Статус'
                },
                {
                    name: [
                        {
                            name: 'date_ts'
                        },
                        {
                            name: function (row) {
                                return sprintf('%s &gt; %s', row.sysid, row.doctype)
                            }
                        }
                    ],
                    title: 'Дата, система, тип документа'
                }
            ],
            data: docData
        } });

    if (sess.ref) {
        pageStructure.pFind('eventflow.docs_in').documentScroller =
            appsrv.page.sync(appsrv, 'scroller', { table: {
                head: [
                    {
                        name: 'name',
                        title: 'Наименование поля'
                    },
                    {
                        name: 'content',
                        title: 'Содержимое поля'
                    }
                ],
                data: (function (document) {
                    var a = [];
                    for (var i in document) {
                        if (document.hasOwnProperty(i)) {
                            a.push({
                                name: (function (i) {
                                    var n = pageStructure.pFind('eventflow.docs_in').docType.fields.find('name', i);
                                    return n ? sprintf('%s (%s)', n.title, i) : i;
                                })(i),
                                content: document[i]
                            });
                        }
                    }
                    return a;
                })(docData[0].document)
            } });

        pageStructure.pFind('eventflow.docs_in').historyScroller =
            appsrv.page.sync(appsrv, 'scroller', { table: {
                head: [
                    {
                        name: function (row) {
                            var x = '';
                            for (var i in row.fields) {
                                if (row.fields.hasOwnProperty(i)) {
                                    x += sprintf('<li>%s : %s</li>', i, row.fields[i]);
                                }
                            }
                            return sprintf('<ul>%s</ul>', x);
                        },
                        title: 'Измененные поля  (предыдущее содержимое)'
                    },
                    {
                        name: 'sysid',
                        title: 'Система'
                    },
                    {
                        name: 'status',
                        title: 'Статус'
                    },
                    {
                        name: 'date_ts',
                        title: 'Дата'
                    }
                ],
                data: docData[0].history
            } });
    }

    pageStructure.pFind('leftmenu').menu
        .find('title', 'ProfitPlatform').menu
        .find('href', '#eventflow.docs_in').active = true;
    pageStructure.pFind('content').content = appsrv.page.sync(appsrv,
        'eventflow.docs_in', pageStructure.pFind('eventflow.docs_in'));
    return pageStructure;
}.async();

module.exports = exports = schema;
var
	event = require('events').EventEmitter,
	rpc = new event(),
	http = require('http'),
	assert = require('assert'),
	url = require('url'),
	sprintf = require('sprintf').sprintf,
	jsonrpc = require('core/jsonrpc.js'),
	l = require('core/logger.js');

rpc.on('local', function(schema, params, xresult){
	var allOk = false;
	l.trace('rpc.local.event', sprintf('Schema = %s; params = %s', schema, JSON.stringify(params)));
    try{
        var cSchema = require('schema/' + schema.split('.').join('/') + '.js');
        assert.ok(cSchema.main);
        params.push(xresult);
        cSchema.main[schema.split('.').join('_')].apply(this, params);
    }catch(e){
        l.error('core.rpc', 'Loading local schema ' + schema + ' failed: ' + e.message);
        xresult('Loading local method ' + schema + ' failed!', null);
    }
});

rpc.on('remote', function(xurl, schema, params, result){
    var options = url.parse(xurl),
    	data = {
    		jsonrpc : '2.0',
    		id : 1,
    		method : schema,
    		params : params
    	},
    	data = JSON.stringify(data);
    options.method = 'POST';
    options.host = options.hostname;
    options.headers = {
    		'Content-length': data.length, 
    		'Content-type': 'application/json'
    };
    l.debug('core.rpc', JSON.stringify(options));
    l.debug('core.rpc', data);
    var req = http.request(options, function(res){
        res.on('data', function(chunk){
        	l.debug('core.rpc', chunk);
            result(null, JSON.parse(chunk)); 
        });
    }).on('error', function(err){
        result({ message : err.message }, null);
    });
    req.write(data);
    req.end();
});

rpc.local = function(schema, params, result){
	rpc.emit('local', schema, params, result);
};

/*
 * FIXME: Future code O_O
 * 
 * 
rpc.local = function(schema, params, result){
	var apikey = params[0],
		inFcn = true;
	rpc.emit('local', 'platform.common.checksession', [apikey], function(serr, sobj) {
		rpc.emit('local', 'platform.common.schemalist', [apikey], function(lerr, lobj) {
			l.trace('core.rpc.local', 
				sprintf('Schema = %s, apikey = %s', schema, apikey));
			if(schema != 'platform.common.getsession') {
				if(serr == jsonrpc.NEED_RELOGIN)
					return result(serr, sobj);
				if((serr == jsonrpc.INVALID_APIKEY || lerr == jsonrpc.INVALID_APIKEY) && apikey != '')
					return result(jsonrpc.INVALID_APIKEY);
                inFcn = false;
                lobj.forEach(function(i){
                    inFcn = inFcn || (i == schema);
                });
    			if(inFcn){
    				rpc.emit('local', schema, params, result);
    			}else{
    				return result(jsonrpc.METHOD_NOT_FOUND);
    			}
			}else{
				rpc.emit('local', schema, params, function(nerr, nobj){
					if(nerr == jsonrpc.NEED_RELOGIN){
						rpc.emit('local', schema, params, result);
					} else 
						result(nerr, nobj);
				});
			}
		});
	});
};
 *
 */

rpc.remote = function(host, schema, params, result){
	rpc.emit('remote', host, schema, params, result);
};

module.exports = exports = {
	local : rpc.local,
	remote : rpc.remote
};

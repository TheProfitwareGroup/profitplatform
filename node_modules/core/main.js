var o = require('options.js');

/**
 * Module dependencies
 */
var heartbeat = require('core/hbeat.js');

var l = require('core/logger.js'),
	connect = require('connect'),
    event = require('events').EventEmitter,
    assert = require('assert'),
    db = require('core/db.js'),
    access = require('core/access.js'),
    sprintf = require('sprintf').sprintf,
    options = new require('options.js'),
    init = new event(),
    path = require('path');
    
var
	staticPath = path.normalize(__dirname + '../../../static');

/**
 * Available schemas
 */

var schemaName = [ 
    'platform.admin.getinfo',
    'platform.common.getsession',
    'platform.common.localize',
    'platform.admin.adduser',
    'platform.common.checksession',
    'platform.common.heartbeat'
];
var schema = [];

/**
 * Main init event
 */

init.on('onInit', function(initcallback){
    db.emit('init', function(){
        db.emit('schema', 'schema.find', {level : access.LEVEL_CORE}, function(err, schemaName){
        	var
        		self = this;
        	init.schemaNames = schemaName;
            schemaName.forEach(function(scm){
                try{
                    var cSchema = require(path.join('schema', path.join.apply(path, scm.split('.')) + '.js'));
                    assert.ok(cSchema.main);
                    schema.push(cSchema.main);
                }catch(e){
                    l.error('core.main', sprintf('Loading schema %s failed: %s', scm, e.message));
                }
            });
            if(options.heartbeat){
            	heartbeat.startHeartbeat();
            }
            db.emit('schema', 'app.find', {}, function(err, nAppArr){
            	var appArray = new Array();
            	nAppArr.forEach(function(param) {
            		appArray.push((function(app) {
                    	return connect.vhost(app.domain,
                    			connect.createServer(
                    					connect.responseTime(),
                    					connect.static(path.join(staticPath, 'app', app.name)),
                    					connect.cookieParser(),
                    					connect.session({ secret : app.secret }),
                    					connect.bodyParser(),
                    					connect.router(require(path.join('app', app.name, 'index.js')))
                    			)
                    	);
                    })(param));
            	});
	            appArray.push(  (function() { return connect.vhost(options.platform_host, 
	            		connect.createServer(
	            				connect.responseTime(),
	            				require('core/jsonrpc.js').apply(self, schema)
	            		).use(connect.static(staticPath))
	            ) })() );
	            var c = connect.createServer.apply(this, appArray);
	            var callback = function() { };
	            if(typeof initcallback == 'function')
	            	callback = function() { process.nextTick(initcallback); }
	            c.listen(options.platform_port, callback);
	            init.server = c;
	            l.trace('core.main', sprintf('Listening on %s:%s', options.platform_host, options.platform_port));
	            l.trace('core.main',sprintf( '    @ %s', staticPath));
	            /* process.on('uncaughtException', function(err) {
	                l.critical('core.main', err);
	            }); */
            });
        });
    });
});

module.exports = exports = function(opts, callback) {
	if(typeof opts == 'object')
		options = opts;
	init.emit('onInit', function(){
		if(typeof callback == 'function')
			callback({
				server : init.server,
				schemas : init.schemaNames
			});
	});
};
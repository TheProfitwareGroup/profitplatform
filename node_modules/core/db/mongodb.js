var l = require('core/logger.js'),
	path = require('path'),
	db = require('mongoose'),
    Schema = db.Schema,
    ObjectId = Schema.ObjectId;

var crypto = require('crypto');

var options = require('options.js'),
    access = require('core/access.js'),
    event = require('events').EventEmitter,
    database = new event();

var initDone = false,
	methodDescr = {};

database.on('init', function(next){

    /**
     * Connect to MongoDB
     */
     
    db.connect(options.db.connection);
    
    initDone = true;
    next();

});

database.on('schema', function(method, params, xresult){
    var result = function(err, obj){
        if(method != 'autoproc.find')
            if(err||(obj===null))
                l.trace('core.db.mongodb', 'db.mongodb.error :: ' + method + ' :: ' + JSON.stringify(err));
            else
                l.trace('core.db.mongodb', 'db.mongodb.return :: ' + method + ' :: ' + JSON.stringify(obj));
        xresult(err, obj);
    };
    var mongoDir = path.join('core', 'db', 'mongodb/');
    if(method != 'autoproc.find')
        l.trace('core.db.mongodb', 'db.mongodb :: ' + method + ' :: ' + JSON.stringify(params));
    var methodNamespace = /\[(.*)\](.*)$/.exec(method);
    if(methodNamespace){
    	method = methodNamespace[2];
    	methodNamespace = methodNamespace[1];
    	mongoDir = path.join('schema', path.join.apply(path, methodNamespace.split('.')), 'db', 'mongodb');
    }
    var model,
        ret = {};
    try{
        if(params.password !== undefined)
            params.password = crypto.createHash('md5').update(params.password).digest('hex');
    }catch(e){l.trace('core.db.mongodb', e);}
    
    try{
	    var 
	    	dbSchema = require(path.join(mongoDir, /(.*)\..*/.exec(method)[1], 'model.js')),
	    	i = {
		   		l : l,
		    	database : database,
		    	model : dbSchema.model,
		    	description : dbSchema.description
	    	};
	    methodDescr[method] = dbSchema.description;
	    require(path.join(mongoDir, method.split('.').join('/') + '.js'))(i, params, result);
    }catch(e){
    	l.error('core.db.mongodb', e);
    	result('DBMethod not found', null);
    }
});

database.methodDescr = function(method){
	return methodDescr[method];
};

exports.db = database;
var l = require('core/logger.js'),
	event = require('events').EventEmitter,
    assert = require('assert'),
    options = require('options.js');
    
var db = require('core/db.js');

var hbeat = {
    globalTimer : 0,
    startHeartbeat : function(){
        l.trace('core.hbeat', 'startHeartbeat');
        setInterval(function(){
            db.emit('schema', 'autoproc.find', [], function(err, autoprocList){
                autoprocList.forEach(function(xobj){
                    xerr = null;
                    if((new Date()).toString() != xobj.lastmatch){
                        xobj.state = db.methodDescr['autoproc.find'].STATE_EXEC;
                        db.emit('schema', 'autoproc.update', xobj, function(err, obj){
                            try{
                                var cSchema = require('../schema/' + xobj.name.split('.').join('/') + '.js');
                                assert.ok(cSchema.main);
                                params = xobj.params;
                                params.apikey = '';
                                params.result = function (xerr, ret){
                                    xobj.retval = ret;
                                    xobj.lastmatch = (new Date()).toString();
                                    if(xobj.redo)
                                        xobj.state = db.methodDescr['autoproc.find'].STATE_PLAN
                                    else
                                        xobj.state = (xerr !== null) ? db.methodDescr['autoproc.find'].STATE_FAIL : db.methodDescr['autoproc.find'].STATE_DONE;
                                    db.emit('schema', 'autoproc.update', xobj, function(err, obj){l.trace('core.hbeat', 'FUCK YEAH!');});
                                };
                                var p = [],
                                    names = cSchema.main[xobj.name.split('.').join('_')].toString().match(/\((.*?)\)/)[1].match(/[\w]+/g);
                                for (var i = 0, len = names.length; i < len; ++i) {
                                    p.push(params[names[i]]);
                                }
                                cSchema.main[xobj.name.split('.').join('_')].apply(this, p);
                            }catch(e){
                                l.trace('core.hbeat', 'Loading autoproc schema ' + xobj.name + ' failed: ' + e.message);
                            }                      
                        });
                    }                    
                });
            });
        }, 1000);
    }
};

module.exports = exports = hbeat;
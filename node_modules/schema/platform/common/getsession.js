/**
 * Module dependencies
 */

var options = require('options.js');
var schema = require('core/schema.js').initme(__filename);
var l = require('core/logger.js'),
    utils = require('connect').utils,
    assert = require('assert'),
    jsonrpc = require('core/jsonrpc.js'),
    db = require('core/db.js');

var main = {};

/**
 * Schema: platform.common.getsession
 *
 * Returns apikey by username and password
 *
 * @param {String} apikey
 * @param {String} user
 * @param {String} password
 * @return {Object}
 * @api public
 */

main[schema] = function (apikey, user, password, result) {
    try {
        db.emit('schema', 'user.find', {login: user, password: password}, function (err, obj) {
            if (err || (obj === null))
                result(jsonrpc.INVALID_CREDENTIALS);
            else {
                var apikey = utils.uid(24),
                    xUser = obj;
                db.emit('schema', 'session.find', {username: xUser.login, pwd: xUser.password}, function (err, obj) {
                    if (err || (obj === null)) {
                        db.emit('schema', 'session.add', {user: xUser, session: apikey, username: xUser.login, pwd: xUser.password}, function (err, obj) {
                            if (err || (obj === null))
                                result(jsonrpc.DATABASE_ERROR);
                            else
                                result(null, apikey);
                        });
                    } else {
                        if (obj.needrelogin) {
                            db.emit('schema', 'session.delete', { session: obj.session }, function (err, obj) {
                                result(jsonrpc.NEED_RELOGIN, obj.session);
                            });
                        } else {
                            db.emit('schema', 'session.update', { session: obj.session, user: xUser, username: xUser.login, pwd: xUser.password }, function (err, obj) {
                                result(null, obj.session);
                            });
                        }
                    }
                });
            }
        });
        //assert.deepEqual([user, password], options.platform_admin); // TODO: Get info from DB

    } catch (e) {
        result(jsonrpc.INVALID_REQUEST);
    }
};

exports.main = main;
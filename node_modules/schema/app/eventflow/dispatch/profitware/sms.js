var
	schema = require('core/schema.js').initme(__filename),
	Sync = require('sync'),
	sprintf = require('sprintf').sprintf,
	rpc = require('core/rpc.js'),
	l = require('core/logger.js'),
	db = require('core/db.js'),
	assert = require('assert');

var
	timeout = 500,
	smsc_sysid = 'SMS center at smsc.ru',
	m_name = 'app.eventflow.dispatch.profitware.sms',
	m_sender = 'profitware';

var main = {};

main[schema] = function(apikey, document, result){
	var
		closed = false;
	Sync(function(){
		var data = {},
			doc = document;
		if(doc.status != 'error'){
			var doc = db.emit.sync(db, 'schema', '[app.eventflow]document.find', doc);
			doc.status = 'pending';
			doc.history.push({
				sysid : smsc_sysid,
				status : 'pending',
				date_ts : new Date()
			});
			data = doc.document;
			if(db.emit.sync(db, 'schema', '[app.eventflow]document.add', doc)){
				l.trace(m_name, sprintf('Adding document %s success', doc.ref));
				var doc = rpc.local('smsc.sendsms', [apikey, m_sender, data.phone, data.text], function(err, obj){
					Sync(function(){
						var doc = rpc.local.sync(rpc, 'app.eventflow.document.status', [apikey, document]);
						if(doc.status != 'error'){
							var fields = {};
							var doc = db.emit.sync(db, 'schema', '[app.eventflow]document.find', doc);
							try {
								var newdoc = obj;
								assert.equal(typeof obj, 'object');
								console.log(newdoc);
								for(var i in newdoc){
									if(doc.document[i])
										fields[i] = doc.document[i];
									doc.document[i] = newdoc[i]
								}
							}catch(e){
								console.log(e);
								if(doc.document.data)
									fields.data = doc.document.data;
								doc.document.data = obj.toString();
							}
							doc.status = 'processed';
							doc.history.push({
								sysid : smsc_sysid,
								status : 'processed',
								date_ts : new Date(),
								fields : fields
							});
							var success = false;
							if(db.emit.sync(db, 'schema', '[app.eventflow]document.add', doc))
								success = true;
							return { ref : doc.ref, success : success };
						}				
					}, function(err, obj){
						if(err){
							l.error(m_name, 'Error receiving document: ' + err);
						}else{
							l.trace(m_name, sprintf('Document %s processed %ssuccessfully from %s', obj.ref, obj.success ? '' : 'un', smsc_sysid));
							closed = true;
						}
					});
				});
			}else{
				throw sprintf('adding document %s failed', doc.ref);
			}
		}
		return data;
	}, function(err, obj){
		if(err)
			l.error(m_name, sprintf('Error sending document %s to %s: ', obj, smsc_sysid) + err);
		else
			l.trace(m_name, sprintf('Document %s sent to %s', obj, smsc_sysid));
	});
	setTimeout(function(){
		Sync(function(){
			if(!closed){
				l.warning(m_name, sprintf('Timeout receiving message from %s', smsc_sysid))
			}
			return rpc.local.sync(rpc, 'app.eventflow.document.status', [apikey, document]);
		}, result);
	}, timeout);

};

exports.main = main;

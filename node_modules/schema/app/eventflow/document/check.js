/**
 * Module dependencies
 */

var options = require('options.js'),
    ef_sysid = 'EventFlow [ProfitPlatform ' + options.version +
        '] (' + options.platform_host + ':' + options.platform_port + ')';
var schema = require('core/schema.js').initme(__filename);
var jsonrpc = require('core/jsonrpc.js'),
    sprintf = require('sprintf').sprintf,
    db = require('core/db.js'),
    Sync = require('sync');

var main = {};

/**
 * Extended typeof
 *
 * @param {Object} obj - object to check
 * @return {String}
 * @api private
 */
var otype = function (obj) {
    return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};


var fields_checks = {
    sysid: 'string',
    ref: 'string',
    history: 'array',
    status: 'string',
    date_ts: 'date',
    document: 'object'
};

/**
 * Schema: app.eventflow.document.check
 *
 * Document check
 *
 * @param {Object} document
 * @return {Boolean}
 * @api public
 */

main[schema] = function (apikey, document, result) {
    Sync(function () {
        try {
            if (document.date_ts && otype(document.date_ts) == 'number')
                document.date_ts = new Date(document.date_ts);
            for (var i in fields_checks) {
                if (otype(document[i]) != fields_checks[i])
                    throw sprintf('Field "%s" is not of type "%s" but "%s"', i, fields_checks[i], typeof document[i]);
            }
            db.emit.sync(db, 'schema', '[app.eventflow]doctype.check', document);
            if (!new RegExp(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/).test(document.ref)) {
                return {
                    valid: false,
                    message: 'Document reference is not a valid UUID identifier'
                }
            }
            return {
                valid: true,
                message: 'Document checked'
            };
        } catch (e) {
            console.log(e);
            return {
                valid: false,
                message: e
            };
        }
    }, result);
};

exports.main = main;
exports.install = function (installInfo) {
    installInfo.eventflowDoctypes.forEach(function (sysid) {
        try {
            db.emit.future(db, 'schema', '[app.eventflow]doctype.add', sysid);
        } catch (e) {
            console.log(e);
        }
    });
}.async();